stages:
  - deploy

deploy:
  stage: deploy
  tags:
    - shell28
  script:
    - echo "Built R1nros&x86:"
    - pwd
    #传输仓库的脚本到对应的docker中
    - cd script/cross
    - docker cp bash.sh cb8b3be9f4ef:/root/
    - cd ../x86
    - docker cp bash.sh  ecb744de6d50:/root/
    #开始编译arm上的nros
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - docker start humnpu
    - docker exec humnpu /root/bash.sh
    - echo "done!"
    #开始编译x86上的nros
    - docker exec x86_compiler /root/bash.sh
    - echo "done!"
    #删除重复的压缩包
    - rm /public/ReleaseMiddleWare/R1nrosInstall-$(date +%Y%m).tar.gz 
    - rm /public/ReleaseMiddleWare/x86_nros_install-$(date +%Y%m).tar.gz 
    #复制docker文件夹的内容到public做准备
    - docker cp 735ed56afa2b:/opt/R1nrosInstall-$(date +%Y%m).tar.gz /public/ReleaseMiddleWare
    - docker cp d78368f12da6:/opt/x86_nros_install-$(date +%Y%m).tar.gz /public/ReleaseMiddleWare
    #进入到pubilc文件夹，并生成sha256文件
    - cd /public/ReleaseMiddleWare/
    - sha256sum R1nrosInstall-$(date +%Y%m).tar.gz > R1nrosInstall-$(date +%Y%m).tar.gz.sha256
    - sha256sum x86_nros_install-$(date +%Y%m).tar.gz > x86_nros_install-$(date +%Y%m).tar.gz.sha256
    #删除原目录下的arm交叉编译的文件包，并从docker里面取出新的文件包
    - rm -r /public/ReleaseMiddleWare/arm
    - rm -r /public/ReleaseMiddleWare/arm.tar.gz
    - docker cp cb8b3be9f4ef:/root/arm.tar.gz /public/ReleaseMiddleWare/
    - tar -xzf /public/ReleaseMiddleWare/arm.tar.gz
    #生成images，并导出docker
    - cd arm
    - docker build -t arm_cross:build .
    - cd /public/ReleaseMiddleWare
    - docker save arm_cross:build > nativeCross1.5.tar 
    - docker rmi arm_cross:build
  timeout: 24h