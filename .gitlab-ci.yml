stages:
  - deploy

deploy:
  stage: deploy
  tags:
    - shellV2
  script:
    - echo "Built R1nros&x86:"
    - pwd
    - cp ros2.repos /public/ReleaseMiddleWare
    - cd /home/songguangfa/qiuzhanpeng/cross
    #输入密码到sudo当中，后续便不需要继续执行此命令了
    #开始编译arm上的nros
    - bash enterCross_auto.sh 
    - echo "done!"
    #开始编译x86上的nros
    - cd /home/songguangfa/qiuzhanpeng/x86_compiler
    - bash compiler.sh 
    - echo "done!"
    #删除重复的压缩包
    - rm /public/ReleaseMiddleWare/R1nrosInstall-$(date +%Y%m).tar.gz 
    - rm /public/ReleaseMiddleWare/x86_nros_install-$(date +%Y%m).tar.gz 
    #复制docker文件夹的内容到public做准备
    - docker cp cb8b3be9f4ef:/opt/R1nrosInstall-$(date +%Y%m).tar.gz /public/ReleaseMiddleWare
    - docker cp ecb744de6d50:/opt/x86_nros_install-$(date +%Y%m).tar.gz /public/ReleaseMiddleWare
    #进入到pubilc文件夹，并生成sha256文件
    - cd /public/ReleaseMiddleWare/
    - sha256sum R1nrosInstall-$(date +%Y%m).tar.gz > R1nrosInstall-$(date +%Y%m).tar.gz.sha256
    - sha256sum x86_nros_install-$(date +%Y%m).tar.gz > x86_nros_install-$(date +%Y%m).tar.gz.sha256
    #删除原目录下的arm交叉编译的文件包，并从docker里面取出新的文件包
    - rm -r /public/ReleaseMiddleWare/arm
    - rm -r /public/ReleaseMiddleWare/arm.tar.gz
    - docker cp cb8b3be9f4ef:/root/arm.tar.gz /public/ReleaseMiddleWare/
    - tar -xzf /public/ReleaseMiddleWare/arm.tar.gz
    #生成images，并导出docker
    - cd arm
    - docker build -t arm_cross:build .
    - cd /public/ReleaseMiddleWare
    - docker save arm_cross:build > nativeCross1.5.tar 
    - docker rmi arm_cross:build
  timeout: 24h